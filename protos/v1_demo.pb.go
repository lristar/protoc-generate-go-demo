// Code generated by iristar/protoc-gen-go-demo

package v1

import (
	context "context"
	errors "errors"
	fmt "fmt"
	gin "github.com/gin-gonic/gin"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the iristar/protoc-gen-go-demo package it is being compiled against.
// context.metadata.
// http.fmt.
//gin.errors.

var srv BlogService_HTTPServer

// HttpServer接口
type BlogService_HTTPServer interface {
	CreateArticle(context.Context, *Article) (*Article, error)

	GetArticles(context.Context, *GetArticlesReq) (*GetArticlesResp, error)

	Login(context.Context, *LoginReq) (*LoginResp, error)
}

type BlogService struct {
	server BlogService_HTTPServer
	router gin.IRouter
	resp   interface {
		Error(ctx *gin.Context, err error)
		ParamsError(ctx *gin.Context, err error)
		Success(ctx *gin.Context, data interface{})
	}
}

// Resp 返回值
type defaultBlogServiceResp struct{}

func response(ctx *gin.Context, status, code int, msg string, data interface{}) {
	ctx.JSON(status, map[string]interface{}{
		"code": code,
		"msg":  msg,
		"data": data,
	})
}

// Error 返回错误信息
func Error(ctx *gin.Context, err error) {
	code := -1
	status := 500
	msg := "未知错误"

	if err == nil {
		msg += ", err is nil"
		response(ctx, status, code, msg, nil)
		return
	}

	type iCode interface {
		HTTPCode() int
		Message() string
		Code() int
	}

	var c iCode
	if errors.As(err, &c) {
		status = c.HTTPCode()
		code = c.Code()
		msg = c.Message()
	}

	_ = ctx.Error(err)

	response(ctx, status, code, msg, nil)
}

// Forbidden 返回禁止信息
func Forbidden(ctx *gin.Context, msg string) {
	code := -1
	response(ctx, http.StatusForbidden, code, msg, nil)
}

// ParamsError 参数错误
func ParamsError(ctx *gin.Context, err error) {
	_ = ctx.Error(err)
	response(ctx, 400, 400, "参数错误", nil)
}

// Success 返回成功信息
func Success(ctx *gin.Context, data interface{}) {
	response(ctx, 200, 0, "成功", data)
}

func Login_0(ctx *gin.Context) {
	var in LoginReq

	if err := ctx.ShouldBindQuery(&in); err != nil {
		ParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := srv.Login(newCtx, &in)
	if err != nil {
		Error(ctx, err)
		return
	}

	Success(ctx, out)
}

func GetArticles_0(ctx *gin.Context) {
	var in GetArticlesReq

	if err := ctx.ShouldBindUri(&in); err != nil {
		ParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		ParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := srv.GetArticles(newCtx, &in)
	if err != nil {
		Error(ctx, err)
		return
	}

	Success(ctx, out)
}

func GetArticles_1(ctx *gin.Context) {
	var in GetArticlesReq

	if err := ctx.ShouldBindQuery(&in); err != nil {
		ParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := srv.GetArticles(newCtx, &in)
	if err != nil {
		Error(ctx, err)
		return
	}

	Success(ctx, out)
}

func CreateArticle_0(ctx *gin.Context) {
	var in Article

	if err := ctx.ShouldBindUri(&in); err != nil {
		ParamsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindJSON(&in); err != nil {
		ParamsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := srv.CreateArticle(newCtx, &in)
	if err != nil {
		Error(ctx, err)
		return
	}

	Success(ctx, out)
}

func RegisterRouter(g *gin.Engine, svc BlogService_HTTPServer) *gin.Engine {
	srv = svc
	g.Use(gin.LoggerWithFormatter(LoggerFormat), gin.RecoveryWithWriter(nil, HandlerRecovery))
	m := g.Group("/")
	m.Use(HandlerPermission)

	g.Handle("GET", "/v1/login", Login_0)

	m.Handle("GET", "/v1/author/:author_id/articles", GetArticles_0)

	m.Handle("GET", "/v1/articles", GetArticles_1)

	m.Handle("POST", "/v1/author/:author_id/articles", CreateArticle_0)

	return g
}

// 权限控制
var HandlerPermission func(g *gin.Context)

// recovery的配置
func HandlerRecovery(g *gin.Context, e interface{}) {
	if e != nil {
		g.AbortWithStatus(http.StatusBadRequest)
		_ = g.Error(errors.New(fmt.Sprintf("%v", e)))
	}
}

// 日志格式的配置
func LoggerFormat(params gin.LogFormatterParams) string {
	return fmt.Sprintf("lzy %v %d %s %s %s %v\n", params.TimeStamp, params.StatusCode, params.ClientIP, params.Method, params.Path, params.ErrorMessage)
}
