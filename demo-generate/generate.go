package demo_generate

import (
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	contextPkg         = protogen.GoImportPath("context")
	fmtPkg             = protogen.GoImportPath("fmt")
	ginPkg             = protogen.GoImportPath("github.com/gin-gonic/gin")
	errPkg             = protogen.GoImportPath("errors")
	metadataPkg        = protogen.GoImportPath("google.golang.org/grpc/metadata")
	deprecationComment = "// Deprecated: Do not use."
)

var methodSets = make(map[string]int)

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_demo.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by iristar/protoc-gen-go-demo")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the iristar/protoc-gen-go-demo package it is being compiled against.")
	g.P("// ", contextPkg.Ident(""), metadataPkg.Ident(""))
	g.P("//", ginPkg.Ident(""), errPkg.Ident(""))
	g.P()
	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
	return g

}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, s *protogen.Service) {
	if s.Desc.Options().(*descriptor.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// HTTP Server

}
